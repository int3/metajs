// Generated by IcedCoffeeScript 1.4.0a
(function() {
  var BreakException, CPSFunction, ContinueException, Environment, InterpreterException, ReturnException, StopIteration, Util, YieldException, argv, createInterpreter, esprima, fs, iced, interp, interpreterGlobal, makeArgsObject, makeLoopCont, parsed, passThroughScheduler, toplevel, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  esprima = require('esprima');

  Util = require('./util/util').Util;

  _ref = require('./util/interp-util'), interpreterGlobal = _ref.interpreterGlobal, InterpreterException = _ref.InterpreterException, ReturnException = _ref.ReturnException, BreakException = _ref.BreakException, ContinueException = _ref.ContinueException, Environment = _ref.Environment;

  YieldException = (function(_super) {

    __extends(YieldException, _super);

    function YieldException(cont, errCont, value) {
      this.cont = cont;
      this.errCont = errCont;
      this.value = value;
    }

    return YieldException;

  })(InterpreterException);

  StopIteration = (function() {

    function StopIteration(value) {
      this.value = value;
    }

    StopIteration.prototype.toString = function() {
      return "StopIteration";
    };

    return StopIteration;

  })();

  Util.defineNonEnumerable(interpreterGlobal, 'StopIteration', StopIteration);

  makeArgsObject = function(argsArray) {
    var arg, argsObject, i, _i, _len;
    argsObject = {};
    for (i = _i = 0, _len = argsArray.length; _i < _len; i = ++_i) {
      arg = argsArray[i];
      argsObject[i] = arg;
    }
    return Util.defineNonEnumerable(argsObject, 'length', argsArray.length);
  };

  CPSFunction = (function() {

    function CPSFunction(name, __env__, __apply__) {
      var _ref1;
      this.name = name;
      this.__env__ = __env__;
      if ((_ref1 = this.__apply__) == null) this.__apply__ = __apply__;
      this.__ctor__ = (new Function("return function " + this.name + "() {}"))();
      this.prototype = this.__ctor__.prototype;
    }

    CPSFunction.prototype.apply = function(thisArg, args) {
      var result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "./cps-interpreter.coffee",
          funcname: "CPSFunction.apply"
        });
        _this.__apply__(thisArg, args, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return result = arguments[0];
            };
          })(),
          lineno: 29
        }), errCont);
        __iced_deferrals._fulfill();
      })(function() {
        return result;
      });
    };

    return CPSFunction;

  })();

  passThroughScheduler = function(node, env, type, callback) {
    var _this = this;
    return function() {
      var args, deferred, that;
      that = _this;
      args = arguments;
      deferred = function() {
        callback.apply(that, args);
      };
      setTimeout(deferred, 100);
    };
  };

  createInterpreter = function(scheduler) {
    var Generator, GeneratorFunction, InterpretedFunction, assign, evalMemberExpr, interp;
    if (scheduler == null) scheduler = passThroughScheduler;
    InterpretedFunction = (function(_super) {

      __extends(InterpretedFunction, _super);

      function InterpretedFunction(name, __env__, __node__) {
        this.__node__ = __node__;
        InterpretedFunction.__super__.constructor.call(this, name, __env__);
      }

      InterpretedFunction.prototype.__apply__ = function(thisArg, args, cont, errCont) {
        var i, param, result, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _len, _ref1,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        this.__env__.increaseScope();
        this.__env__.insert('arguments', makeArgsObject(args));
        _ref1 = this.__node__.params;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          param = _ref1[i];
          this.__env__.insert(param.name, args[i]);
        }
        this.__env__.insert('this', thisArg);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "./cps-interpreter.coffee",
            funcname: "InterpretedFunction.__apply__"
          });
          interp(_this.__node__.body, _this.__env__, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return result = arguments[0];
              };
            })(),
            lineno: 54
          }), function(e) {
            if (e instanceof ReturnException) {
              _this.__env__.decreaseScope();
              return cont(e.value);
            } else {
              return errCont(e);
            }
          });
          __iced_deferrals._fulfill();
        })(function() {
          _this.__env__.decreaseScope();
          return cont(result);
        });
      };

      return InterpretedFunction;

    })(CPSFunction);
    GeneratorFunction = (function(_super) {

      __extends(GeneratorFunction, _super);

      function GeneratorFunction() {
        return GeneratorFunction.__super__.constructor.apply(this, arguments);
      }

      GeneratorFunction.prototype.__apply__ = function(thisArg, args, cont, errCont) {
        return cont(new Generator(thisArg, args, this.__node__, this.__env__.copy()));
      };

      return GeneratorFunction;

    })(InterpretedFunction);
    Generator = (function() {
      var CLOSED, EXECUTING, NEWBORN, SUSPENDED;

      NEWBORN = {};

      EXECUTING = {};

      CLOSED = {};

      SUSPENDED = {};

      function Generator(thisArg, args, __node__, __env__) {
        var i, param, _i, _len, _ref1;
        this.__node__ = __node__;
        this.__env__ = __env__;
        this.__cont__ = null;
        this.__state__ = NEWBORN;
        this.__env__.increaseScope();
        this.__env__.insert('arguments', makeArgsObject(args));
        _ref1 = this.__node__.params;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          param = _ref1[i];
          this.__env__.insert(param.name, args[i]);
        }
        this.__env__.insert('this', thisArg);
      }

      Generator.prototype.send = new CPSFunction('send', null, function(thisArg, args, cont, errCont) {
        var bodyCont, rv, v, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        v = args[0];
        thisArg.__calleeCont__ = cont;
        thisArg.__calleeErrCont__ = errCont;
        switch (thisArg.__state__) {
          case EXECUTING:
            return __iced_k(errCont(new Error("Generator is already executing")));
          case CLOSED:
            return __iced_k(errCont(new StopIteration));
          case NEWBORN:
            if (v !== void 0) throw new TypeError;
            thisArg.__state__ = EXECUTING;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "Generator"
              });
              interp(thisArg.__node__.body, thisArg.__env__, bodyCont = __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return rv = arguments[0];
                  };
                })(),
                lineno: 93
              }), function(e) {
                if (e instanceof YieldException) {
                  thisArg.__state__ = SUSPENDED;
                  thisArg.__cont__ = e.cont;
                  thisArg.__errCont__ = e.errCont;
                  return thisArg.__calleeCont__(e.value);
                } else if (e instanceof ReturnException) {
                  return bodyCont(e.value);
                } else {
                  return thisArg.__calleeErrCont__(e);
                }
              });
              __iced_deferrals._fulfill();
            })(function() {
              thisArg.__state__ = CLOSED;
              return __iced_k(thisArg.__calleeErrCont__(new StopIteration(rv)));
            });
            break;
          default:
            return __iced_k(thisArg.__cont__(v));
        }
      });

      Generator.prototype.next = new CPSFunction('next', null, function(thisArg, args, cont, errCont) {
        return thisArg.send.__apply__(thisArg, [], cont, errCont);
      });

      Generator.prototype.close = new CPSFunction('close', null, function(thisArg, args, cont, errCont) {
        thisArg.__calleeCont__ = cont;
        thisArg.__calleeErrCont__ = function(e) {
          if (e instanceof StopIteration) {
            return cont();
          } else {
            return errCont(e);
          }
        };
        switch (thisArg.__state__) {
          case EXECUTING:
            return errCont(new Error("Generator is currently executing"));
          case NEWBORN:
            return thisArg.__state__ = CLOSED;
          case SUSPENDED:
            thisArg.__state__ = EXECUTING;
            return thisArg.__errCont__(new ReturnException);
          case CLOSED:
            return cont();
        }
      });

      Generator.prototype["throw"] = new CPSFunction('_throw', null, function(thisArg, args, cont, errCont) {
        thisArg.__calleeCont__ = cont;
        thisArg.__calleeErrCont__ = errCont;
        switch (thisArg.__state__) {
          case EXECUTING:
            return errCont(new Error("Generator is currently executing"));
          case CLOSED:
            return errCont(new Error("Generator is closed"));
          case NEWBORN:
            thisArg.__state__ = CLOSED;
            return thisArg.__calleeErrCont__(args[0]);
          case SUSPENDED:
            thisArg.__state__ = EXECUTING;
            return thisArg.__errCont__(args[0]);
        }
      });

      Generator.prototype.iterator = new CPSFunction('iterator', null, function(thisArg, args, cont, errCont) {
        return cont(thisArg);
      });

      return Generator;

    })();
    interp = function(node, env, cont, errCont) {
      var arg, argResult, args, ast, bodyCont, callee, calleeName, dec, el, elValue, finalizeAndCont, finalizeAndThrow, fnName, gen, genFn, i, id, ifn, init, iterable, iterator, k, lhs, name, newValue, obj, object, original, prop, propValue, property, result, rhs, rv, stmt, test, thisArg, v, value, yieldValue, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref1, _ref2,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (env == null) env = new Environment;
      cont = scheduler(node, env, 'result', cont);
      errCont = scheduler(node, env, 'error', errCont);
      try {
        switch (node.type) {
          case 'Program':
          case 'BlockStatement':
            (function(__iced_k) {
              var _i, _len, _ref1, _results, _while;
              _ref1 = node.body;
              _len = _ref1.length;
              i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next, _ref2;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(i < _len)) {
                  return _break();
                } else {
                  stmt = _ref1[i];
                  env.strict || (env.strict = i === 0 && ((_ref2 = stmt.expression) != null ? _ref2.value : void 0) === 'use strict');
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "./cps-interpreter.coffee",
                      funcname: "interp"
                    });
                    interp(stmt, env, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return v = arguments[0];
                        };
                      })(),
                      lineno: 155
                    }), errCont);
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (node.type === 'Program' && i === node.body.length - 1) {
                      return cont(v);
                    }
                    return _next();
                  });
                }
              };
              _while(__iced_k);
            })(function() {
              return __iced_k(setTimeout(cont(), 0));
            });
            break;
          case 'FunctionDeclaration':
          case 'FunctionExpression':
            name = (_ref1 = (_ref2 = node.id) != null ? _ref2.name : void 0) != null ? _ref1 : '';
            ifn = new (node.generator ? GeneratorFunction : InterpretedFunction)(name, env.copy(), node);
            if (node.id != null) env.insert(node.id.name, ifn);
            return __iced_k(cont(ifn));
          case 'VariableDeclaration':
            (function(__iced_k) {
              var _i, _len, _ref3, _results, _while;
              _ref3 = node.declarations;
              _len = _ref3.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  dec = _ref3[_i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "./cps-interpreter.coffee",
                      funcname: "interp"
                    });
                    interp(dec, env, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return result = arguments[0];
                        };
                      })(),
                      lineno: 166
                    }), errCont);
                    __iced_deferrals._fulfill();
                  })(_next);
                }
              };
              _while(__iced_k);
            })(function() {
              return __iced_k(cont());
            });
            break;
          case 'VariableDeclarator':
            (function(__iced_k) {
              if (node.init != null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "./cps-interpreter.coffee",
                    funcname: "interp"
                  });
                  interp(node.init, env, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return init = arguments[0];
                      };
                    })(),
                    lineno: 170
                  }), errCont);
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k(init = void 0);
              }
            })(function() {
              return __iced_k(cont(env.insert(node.id.name, init, env)));
            });
            break;
          case 'ExpressionStatement':
            return __iced_k(interp(node.expression, env, cont, errCont));
          case 'CallExpression':
            callee = null;
            (function(__iced_k) {
              if (node.callee.type === 'MemberExpression') {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "./cps-interpreter.coffee",
                    funcname: "interp"
                  });
                  evalMemberExpr(node.callee, env, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        thisArg = arguments[0];
                        return calleeName = arguments[1];
                      };
                    })(),
                    lineno: 179
                  }), errCont);
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(callee = thisArg[calleeName]);
                });
              } else {
                thisArg = void 0;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "./cps-interpreter.coffee",
                    funcname: "interp"
                  });
                  interp(node.callee, env, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return callee = arguments[0];
                      };
                    })(),
                    lineno: 183
                  }), errCont);
                  __iced_deferrals._fulfill();
                })(__iced_k);
              }
            })(function() {
              return (function(__iced_k) {
                var _i, _len, _ref3, _results, _while;
                _ref3 = node["arguments"];
                _len = _ref3.length;
                _i = 0;
                _results = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_i;
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!(_i < _len)) {
                    return _break();
                  } else {
                    arg = _ref3[_i];
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(arg, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return argResult = arguments[0];
                          };
                        })(),
                        lineno: 186
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(function() {
                      return _next(argResult);
                    });
                  }
                };
                _while(__iced_k);
              })(function(___iced_p__0) {
                args = ___iced_p__0;
                if (callee === eval) {
                  if (!Util.isString(args[0])) return cont(args[0]);
                  ast = esprima.parse(args[0]);
                  fnName = node.callee.type === 'MemberExpression' && node.callee.property.type === 'Identifier' ? node.callee.property.name : node.callee.type === 'Identifier' ? node.callee.name : null;
                  if (fnName === 'eval') {
                    interp(ast, env, cont, errCont);
                  } else {
                    interp(ast, env.getGlobalEnv(), cont, errCont);
                  }
                } else {
                  if (callee instanceof CPSFunction) {
                    callee.__apply__(thisArg, args, cont, errCont);
                  } else {
                    cont(callee.apply(thisArg, args));
                  }
                }
                return __iced_k();
              });
            });
            break;
          case 'NewExpression':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.callee, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return callee = arguments[0];
                  };
                })(),
                lineno: 209
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              return (function(__iced_k) {
                var _i, _len, _ref3, _results, _while;
                _ref3 = node["arguments"];
                _len = _ref3.length;
                _i = 0;
                _results = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_i;
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!(_i < _len)) {
                    return _break();
                  } else {
                    arg = _ref3[_i];
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(arg, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return result = arguments[0];
                          };
                        })(),
                        lineno: 212
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(function() {
                      return _next(result);
                    });
                  }
                };
                _while(__iced_k);
              })(function(___iced_p__1) {
                args = ___iced_p__1;
                (function(__iced_k) {
                  if (callee.__ctor__ != null) {
                    obj = new callee.__ctor__;
                    (function(__iced_k) {
                      if (callee instanceof CPSFunction) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "./cps-interpreter.coffee",
                            funcname: "interp"
                          });
                          callee.__apply__(obj, args, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return result = arguments[0];
                              };
                            })(),
                            lineno: 217
                          }), errCont);
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k(callee.apply(obj, args));
                      }
                    })(__iced_k);
                  } else {
                    (function(__iced_k) {
                      if (callee instanceof CPSFunction) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "./cps-interpreter.coffee",
                            funcname: "interp"
                          });
                          callee.bind.__apply__(callee, [null].concat(args), __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return result = arguments[0];
                              };
                            })(),
                            lineno: 222
                          }), errCont);
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k(obj = new (callee.bind.apply(callee, [null].concat(args))));
                      }
                    })(__iced_k);
                  }
                })(function() {
                  return __iced_k(cont(obj));
                });
              });
            });
            break;
          case 'IfStatement':
          case 'ConditionalExpression':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.test, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return test = arguments[0];
                  };
                })(),
                lineno: 228
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(test ? interp(node.consequent, env, cont, errCont) : node.alternate != null ? interp(node.alternate, env, cont, errCont) : cont());
            });
            break;
          case 'WhileStatement':
            (function(__iced_k) {
              var _results, _while;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!true) {
                  return _break();
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "./cps-interpreter.coffee",
                      funcname: "interp"
                    });
                    interp(node.test, env, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return test = arguments[0];
                        };
                      })(),
                      lineno: 238
                    }), errCont);
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (!test) return cont();
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(node.body, env, bodyCont = __iced_deferrals.defer({
                        lineno: 241
                      }), makeLoopCont(node.body, env, bodyCont, cont, errCont));
                      __iced_deferrals._fulfill();
                    })(_next);
                  });
                }
              };
              _while(__iced_k);
            })(__iced_k);
            break;
          case 'DoWhileStatement':
            (function(__iced_k) {
              var _results, _while;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!true) {
                  return _break();
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "./cps-interpreter.coffee",
                      funcname: "interp"
                    });
                    interp(node.body, env, bodyCont = __iced_deferrals.defer({
                      lineno: 246
                    }), makeLoopCont(node.body, env, bodyCont, cont, errCont));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(node.test, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return test = arguments[0];
                          };
                        })(),
                        lineno: 249
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(function() {
                      if (!test) return cont();
                      return _next();
                    });
                  });
                }
              };
              _while(__iced_k);
            })(__iced_k);
            break;
          case 'ForStatement':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.init, env, __iced_deferrals.defer({
                lineno: 252
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                var _results, _while;
                _results = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!true) {
                    return _break();
                  } else {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(node.test, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return test = arguments[0];
                          };
                        })(),
                        lineno: 255
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(function() {
                      if (!test) return cont();
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "./cps-interpreter.coffee",
                          funcname: "interp"
                        });
                        interp(node.body, env, bodyCont = __iced_deferrals.defer({
                          lineno: 258
                        }), makeLoopCont(node.body, env, bodyCont, cont, errCont));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "./cps-interpreter.coffee",
                            funcname: "interp"
                          });
                          interp(node.update, env, __iced_deferrals.defer({
                            lineno: 261
                          }), errCont);
                          __iced_deferrals._fulfill();
                        })(_next);
                      });
                    });
                  }
                };
                _while(__iced_k);
              })(__iced_k);
            });
            break;
          case 'ForInStatement':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.left, env, __iced_deferrals.defer({
                lineno: 263
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "./cps-interpreter.coffee",
                  funcname: "interp"
                });
                interp(node.right, env, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return obj = arguments[0];
                    };
                  })(),
                  lineno: 264
                }), errCont);
                __iced_deferrals._fulfill();
              })(function() {
                id = node.left.type === 'VariableDeclaration' ? node.left.declarations[0].id : node.left;
                (function(__iced_k) {
                  var _i, _k, _keys, _ref3, _results, _while;
                  _ref3 = obj;
                  _keys = (function() {
                    var _results1;
                    _results1 = [];
                    for (_k in _ref3) {
                      _results1.push(_k);
                    }
                    return _results1;
                  })();
                  _i = 0;
                  _results = [];
                  _while = function(__iced_k) {
                    var _break, _continue, _next;
                    _break = function() {
                      return __iced_k(_results);
                    };
                    _continue = function() {
                      return iced.trampoline(function() {
                        ++_i;
                        return _while(__iced_k);
                      });
                    };
                    _next = function(__iced_next_arg) {
                      _results.push(__iced_next_arg);
                      return _continue();
                    };
                    if (!(_i < _keys.length)) {
                      return _break();
                    } else {
                      k = _keys[_i];
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "./cps-interpreter.coffee",
                          funcname: "interp"
                        });
                        assign(id, k, env, __iced_deferrals.defer({
                          lineno: 271
                        }), errCont);
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "./cps-interpreter.coffee",
                            funcname: "interp"
                          });
                          interp(node.body, env, bodyCont = __iced_deferrals.defer({
                            lineno: 272
                          }), makeLoopCont(node.body, env, bodyCont, cont, errCont));
                          __iced_deferrals._fulfill();
                        })(_next);
                      });
                    }
                  };
                  _while(__iced_k);
                })(function() {
                  return __iced_k(cont());
                });
              });
            });
            break;
          case 'ForOfStatement':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.left, env, __iced_deferrals.defer({
                lineno: 276
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "./cps-interpreter.coffee",
                  funcname: "interp"
                });
                interp(node.right, env, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return iterable = arguments[0];
                    };
                  })(),
                  lineno: 277
                }), errCont);
                __iced_deferrals._fulfill();
              })(function() {
                id = node.left.type === 'VariableDeclaration' ? node.left.declarations[0].id : node.left;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "./cps-interpreter.coffee",
                    funcname: "interp"
                  });
                  iterable.iterator.__apply__(iterable, [], __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return iterator = arguments[0];
                      };
                    })(),
                    lineno: 283
                  }), errCont);
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    var _results, _while;
                    _results = [];
                    _while = function(__iced_k) {
                      var _break, _continue, _next;
                      _break = function() {
                        return __iced_k(_results);
                      };
                      _continue = function() {
                        return iced.trampoline(function() {
                          return _while(__iced_k);
                        });
                      };
                      _next = function(__iced_next_arg) {
                        _results.push(__iced_next_arg);
                        return _continue();
                      };
                      if (!true) {
                        return _break();
                      } else {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "./cps-interpreter.coffee",
                            funcname: "interp"
                          });
                          iterator.next.__apply__(iterator, [], __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return v = arguments[0];
                              };
                            })(),
                            lineno: 285
                          }), function(e) {
                            if (e instanceof StopIteration) {
                              return cont();
                            } else {
                              return errCont(e);
                            }
                          });
                          __iced_deferrals._fulfill();
                        })(function() {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "./cps-interpreter.coffee",
                              funcname: "interp"
                            });
                            assign(id, v, env, __iced_deferrals.defer({
                              lineno: 287
                            }), errCont);
                            __iced_deferrals._fulfill();
                          })(function() {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "./cps-interpreter.coffee",
                                funcname: "interp"
                              });
                              interp(node.body, env, bodyCont = __iced_deferrals.defer({
                                lineno: 288
                              }), makeLoopCont(node.body, env, bodyCont, cont, errCont));
                              __iced_deferrals._fulfill();
                            })(_next);
                          });
                        });
                      }
                    };
                    _while(__iced_k);
                  })(__iced_k);
                });
              });
            });
            break;
          case 'BreakStatement':
            return __iced_k(errCont(new BreakException));
          case 'ContinueStatement':
            return __iced_k(errCont(new ContinueException));
          case 'ReturnStatement':
            (function(__iced_k) {
              if (node.argument === null) {
                return __iced_k(errCont(new ReturnException(void 0)));
              } else {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "./cps-interpreter.coffee",
                    funcname: "interp"
                  });
                  interp(node.argument, env, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return result = arguments[0];
                      };
                    })(),
                    lineno: 298
                  }), errCont);
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(errCont(new ReturnException(result)));
                });
              }
            })(__iced_k);
            break;
          case 'ThrowStatement':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.argument, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return result = arguments[0];
                  };
                })(),
                lineno: 301
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(errCont(result));
            });
            break;
          case 'TryStatement':
            finalizeAndThrow = function(e) {
              var ___iced_passed_deferral1, __iced_deferrals, __iced_k,
                _this = this;
              __iced_k = __iced_k_noop;
              ___iced_passed_deferral1 = iced.findDeferral(arguments);
              (function(__iced_k) {
                if (node.finalizer) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral1,
                      filename: "./cps-interpreter.coffee",
                      funcname: "finalizeAndThrow"
                    });
                    interp(node.finalizer, env, __iced_deferrals.defer({
                      lineno: 307
                    }), errCont);
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(function() {
                return errCont(e);
              });
            };
            finalizeAndCont = function() {
              if (node.finalizer) {
                return interp(node.finalizer, env, cont, errCont);
              } else {
                return cont();
              }
            };
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.block, env, __iced_deferrals.defer({
                lineno: 312
              }), function(e) {
                var catchEnv, ___iced_passed_deferral1, __iced_deferrals, __iced_k,
                  _this = this;
                __iced_k = __iced_k_noop;
                ___iced_passed_deferral1 = iced.findDeferral(arguments);
                if (e instanceof YieldException) {
                  return __iced_k(errCont(e));
                } else {
                  (function(__iced_k) {
                    if (!(e instanceof InterpreterException) && node.handlers.length > 0) {
                      catchEnv = env.increaseScope(true);
                      catchEnv.set(node.handlers[0].param.name, e);
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral1,
                          filename: "./cps-interpreter.coffee"
                        });
                        interp(node.handlers[0], env, __iced_deferrals.defer({
                          lineno: 318
                        }), function(e) {
                          env.decreaseScope();
                          return finalizeAndThrow(e);
                        });
                        __iced_deferrals._fulfill();
                      })(function() {
                        env.decreaseScope();
                        return __iced_k(finalizeAndCont());
                      });
                    } else {
                      return __iced_k(finalizeAndThrow(e));
                    }
                  })(__iced_k);
                }
              });
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(finalizeAndCont());
            });
            break;
          case 'CatchClause':
            return __iced_k(interp(node.body, env, cont, errCont));
          case 'LogicalExpression':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.left, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return lhs = arguments[0];
                  };
                })(),
                lineno: 330
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                switch (node.operator) {
                  case '&&':
                    (function(__iced_k) {
                      if (lhs) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "./cps-interpreter.coffee",
                            funcname: "interp"
                          });
                          interp(node.right, env, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return rhs = arguments[0];
                              };
                            })(),
                            lineno: 334
                          }), errCont);
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(function() {
                      return __iced_k(cont(lhs && rhs));
                    });
                    break;
                  case '||':
                    (function(__iced_k) {
                      if (!lhs) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "./cps-interpreter.coffee",
                            funcname: "interp"
                          });
                          interp(node.right, env, __iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return rhs = arguments[0];
                              };
                            })(),
                            lineno: 337
                          }), errCont);
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(function() {
                      return __iced_k(cont(lhs || rhs));
                    });
                    break;
                  default:
                    return __iced_k(errCont("Unrecognized operator " + node.operator));
                }
              })(__iced_k);
            });
            break;
          case 'BinaryExpression':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.left, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return lhs = arguments[0];
                  };
                })(),
                lineno: 342
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "./cps-interpreter.coffee",
                  funcname: "interp"
                });
                interp(node.right, env, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return rhs = arguments[0];
                    };
                  })(),
                  lineno: 343
                }), errCont);
                __iced_deferrals._fulfill();
              })(function() {
                var _ref3;
                switch (node.operator) {
                  case '+':
                    cont(lhs + rhs);
                    break;
                  case '-':
                    cont(lhs - rhs);
                    break;
                  case '*':
                    cont(lhs * rhs);
                    break;
                  case '/':
                    cont(lhs / rhs);
                    break;
                  case '&':
                    cont(lhs & rhs);
                    break;
                  case '|':
                    cont(lhs | rhs);
                    break;
                  case '^':
                    cont(lhs ^ rhs);
                    break;
                  case '>>':
                    cont(lhs >> rhs);
                    break;
                  case '<<':
                    cont(lhs << rhs);
                    break;
                  case '>>>':
                    cont(lhs >>> rhs);
                    break;
                  case '<':
                    cont(lhs < rhs);
                    break;
                  case '>':
                    cont(lhs > rhs);
                    break;
                  case '<=':
                    cont(lhs <= rhs);
                    break;
                  case '>=':
                    cont(lhs >= rhs);
                    break;
                  case '==':
                    cont(lhs == rhs);
                    break;
                  case '===':
                    cont(lhs === rhs);
                    break;
                  case '!=':
                    cont(lhs != rhs);
                    break;
                  case '!==':
                    cont(lhs !== rhs);
                    break;
                  case 'instanceof':
                    cont(lhs instanceof ((_ref3 = rhs != null ? rhs.__ctor__ : void 0) != null ? _ref3 : rhs));
                    break;
                  default:
                    errCont("Unrecognized operator " + node.operator);
                }
                return __iced_k();
              });
            });
            break;
          case 'AssignmentExpression':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.right, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return value = arguments[0];
                  };
                })(),
                lineno: 386
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (node.operator === '=') {
                  return __iced_k(assign(node.left, value, env, cont, errCont));
                } else {
                  (function(__iced_k) {
                    if (node.left.type === 'Identifier') {
                      return __iced_k(original = env.resolve(node.left.name));
                    } else {
                      (function(__iced_k) {
                        if (node.left.type === 'MemberExpression') {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "./cps-interpreter.coffee",
                              funcname: "interp"
                            });
                            evalMemberExpr(node.left, env, __iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  object = arguments[0];
                                  return property = arguments[1];
                                };
                              })(),
                              lineno: 393
                            }), errCont);
                            __iced_deferrals._fulfill();
                          })(function() {
                            return __iced_k(original = object[property]);
                          });
                        } else {
                          return __iced_k(errCont("Invalid LHS in assignment"));
                        }
                      })(__iced_k);
                    }
                  })(function() {
                    switch (node.operator) {
                      case '+=':
                        original += value;
                        break;
                      case '-=':
                        original -= value;
                        break;
                      case '*=':
                        original *= value;
                        break;
                      case '/=':
                        original /= value;
                        break;
                      case '&=':
                        original &= value;
                        break;
                      case '|=':
                        original |= value;
                        break;
                      default:
                        errCont("Unrecognized compound assignment " + node.operator);
                    }
                    if (node.left.type === 'Identifier') {
                      env.insert(node.left.name, original);
                    } else if (node.left.type === 'MemberExpression') {
                      object[property] = original;
                    }
                    return __iced_k(cont(original));
                  });
                }
              })(__iced_k);
            });
            break;
          case 'UpdateExpression':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              interp(node.argument, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return original = arguments[0];
                  };
                })(),
                lineno: 418
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              if (node.operator === '++') {
                newValue = original + 1;
              } else {
                newValue = original - 1;
              }
              (function(__iced_k) {
                if (node.argument.type === 'Identifier') {
                  return __iced_k(env.insert(node.argument.name, newValue));
                } else {
                  (function(__iced_k) {
                    if (node.argument.type === 'MemberExpression') {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "./cps-interpreter.coffee",
                          funcname: "interp"
                        });
                        evalMemberExpr(node.argument, env, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              object = arguments[0];
                              return property = arguments[1];
                            };
                          })(),
                          lineno: 426
                        }), errCont);
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(object[property] = newValue);
                      });
                    } else {
                      return __iced_k();
                    }
                  })(__iced_k);
                }
              })(function() {
                return __iced_k(cont(node.prefix ? newValue : original));
              });
            });
            break;
          case 'UnaryExpression':
            (function(__iced_k) {
              if (node.operator === 'delete') {
                (function(__iced_k) {
                  if (node.argument.type === 'MemberExpression') {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      evalMemberExpr(node.argument, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            object = arguments[0];
                            return property = arguments[1];
                          };
                        })(),
                        lineno: 432
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(function() {
                      return __iced_k(cont(delete object[property]));
                    });
                  } else {
                    return __iced_k(errCont("NYI"));
                  }
                })(__iced_k);
              } else {
                (function(__iced_k) {
                  if (node.operator === 'typeof' && node.argument.type === 'Identifier' && !env.has(node.argument.name)) {
                    return __iced_k(cont('undefined'));
                  } else {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(node.argument, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return arg = arguments[0];
                          };
                        })(),
                        lineno: 440
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(function() {
                      switch (node.operator) {
                        case '-':
                          cont(-arg);
                          break;
                        case '~':
                          cont(~arg);
                          break;
                        case '!':
                          cont(!arg);
                          break;
                        case 'typeof':
                          cont(typeof arg);
                          break;
                        default:
                          errCont("NYI");
                      }
                      return __iced_k();
                    });
                  }
                })(__iced_k);
              }
            })(__iced_k);
            break;
          case 'Identifier':
            return __iced_k(cont(env.resolve(node.name)));
          case 'MemberExpression':
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "interp"
              });
              evalMemberExpr(node, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    object = arguments[0];
                    return property = arguments[1];
                  };
                })(),
                lineno: 456
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(cont(object[property]));
            });
            break;
          case 'ThisExpression':
            return __iced_k(cont(env.resolve('this')));
          case 'Literal':
            return __iced_k(cont(node.value));
          case 'ObjectExpression':
            obj = {};
            (function(__iced_k) {
              var _i, _len, _ref3, _results, _while;
              _ref3 = node.properties;
              _len = _ref3.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  prop = _ref3[_i];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "./cps-interpreter.coffee",
                      funcname: "interp"
                    });
                    interp(prop.value, env, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return propValue = arguments[0];
                        };
                      })(),
                      lineno: 465
                    }), errCont);
                    __iced_deferrals._fulfill();
                  })(function() {
                    var _ref4;
                    return _next(obj[(_ref4 = prop.key.name) != null ? _ref4 : prop.key.value] = propValue);
                  });
                }
              };
              _while(__iced_k);
            })(function() {
              return __iced_k(cont(obj));
            });
            break;
          case 'ArrayExpression':
            return (function(__iced_k) {
              return (function(__iced_k) {
                var _i, _len, _ref3, _results, _while;
                _ref3 = node.elements;
                _len = _ref3.length;
                _i = 0;
                _results = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_i;
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!(_i < _len)) {
                    return _break();
                  } else {
                    el = _ref3[_i];
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(el, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return elValue = arguments[0];
                          };
                        })(),
                        lineno: 471
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(_next);
                  }
                };
                _while(__iced_k);
              })(function(___iced_p__3) {
                return __iced_k(cont(___iced_p__3));
              });
            })(__iced_k);
          case 'YieldExpression':
            (function(__iced_k) {
              if (node.delegate) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "./cps-interpreter.coffee",
                    funcname: "interp"
                  });
                  interp(node.argument, env, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return gen = arguments[0];
                      };
                    })(),
                    lineno: 474
                  }), errCont);
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "./cps-interpreter.coffee",
                      funcname: "interp"
                    });
                    gen.send.__apply__(gen, [], __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return yieldValue = arguments[0];
                        };
                      })(),
                      lineno: 475
                    }), errCont);
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      var _results, _while;
                      _results = [];
                      _while = function(__iced_k) {
                        var _break, _continue, _next;
                        _break = function() {
                          return __iced_k(_results);
                        };
                        _continue = function() {
                          return iced.trampoline(function() {
                            return _while(__iced_k);
                          });
                        };
                        _next = function(__iced_next_arg) {
                          _results.push(__iced_next_arg);
                          return _continue();
                        };
                        if (!true) {
                          return _break();
                        } else {
                          rv = new iced.Rendezvous;
                          errCont(new YieldException(rv.id(gen.send).__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return v = arguments[0];
                              };
                            })(),
                            lineno: 480
                          }), rv.id(gen["throw"]).__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return v = arguments[0];
                              };
                            })(),
                            lineno: 481
                          }), yieldValue));
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "./cps-interpreter.coffee",
                              funcname: "interp"
                            });
                            rv.wait(__iced_deferrals.defer({
                              assign_fn: (function() {
                                return function() {
                                  return genFn = arguments[0];
                                };
                              })(),
                              lineno: 483
                            }));
                            __iced_deferrals._fulfill();
                          })(function() {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "./cps-interpreter.coffee",
                                funcname: "interp"
                              });
                              genFn.__apply__(gen, [v], __iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return yieldValue = arguments[0];
                                  };
                                })(),
                                lineno: 483
                              }), function(e) {
                                if (e instanceof StopIteration) {
                                  return cont(e.value);
                                } else if (v instanceof ReturnException) {
                                  return cont();
                                } else {
                                  return errCont(e);
                                }
                              });
                              __iced_deferrals._fulfill();
                            })(_next);
                          });
                        }
                      };
                      _while(__iced_k);
                    })(__iced_k);
                  });
                });
              } else {
                (function(__iced_k) {
                  if (node.argument != null) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "./cps-interpreter.coffee",
                        funcname: "interp"
                      });
                      interp(node.argument, env, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return yieldValue = arguments[0];
                          };
                        })(),
                        lineno: 491
                      }), errCont);
                      __iced_deferrals._fulfill();
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(function() {
                  return __iced_k(errCont(new YieldException(cont, errCont, yieldValue)));
                });
              }
            })(__iced_k);
            break;
          default:
            return __iced_k(errCont("Unrecognized node '" + node.type + "'!"));
        }
      } catch (e) {
        return errCont(e);
      }
    };
    evalMemberExpr = function(node, env, cont, errCont) {
      var object, propNode, property, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "./cps-interpreter.coffee",
          funcname: "evalMemberExpr"
        });
        interp(node.object, env, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return object = arguments[0];
            };
          })(),
          lineno: 499
        }), errCont);
        __iced_deferrals._fulfill();
      })(function() {
        propNode = node.property;
        if (propNode.type === 'Identifier' && !node.computed) {
          return __iced_k(cont(object, propNode.name));
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "./cps-interpreter.coffee",
              funcname: "evalMemberExpr"
            });
            interp(propNode, env, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return property = arguments[0];
                };
              })(),
              lineno: 504
            }), errCont);
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(cont(object, property));
          });
        }
      });
    };
    assign = function(node, value, env, cont, errCont) {
      var object, property, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (node.type === 'Identifier') {
        try {
          env.update(node.name, value);
        } catch (e) {
          env.globalInsert(node.name, value);
        }
        return __iced_k(cont(value));
      } else {
        (function(__iced_k) {
          if (node.type === 'MemberExpression') {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "./cps-interpreter.coffee",
                funcname: "assign"
              });
              evalMemberExpr(node, env, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    object = arguments[0];
                    return property = arguments[1];
                  };
                })(),
                lineno: 515
              }), errCont);
              __iced_deferrals._fulfill();
            })(function() {
              object[property] = value;
              return __iced_k(cont(value));
            });
          } else {
            return __iced_k(errCont("Invalid LHS in assignment"));
          }
        })(__iced_k);
      }
    };
    return interp;
  };

  makeLoopCont = function(body, env, bodyCont, cont, errCont) {
    return function(e) {
      if (e instanceof BreakException) {
        return cont();
      } else if (e instanceof ContinueException) {
        return bodyCont();
      } else {
        return errCont(e);
      }
    };
  };

  toplevel = function() {
    var env, interp, repl;
    repl = require('repl');
    env = new Environment;
    interp = createInterpreter();
    return repl.start({
      "eval": function(cmd, ctx, filename, callback) {
        var ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "./cps-interpreter.coffee"
        });
        interp(esprima.parse(cmd.slice(1, -1), {
          loc: true
        }), env, callback, function(e) {
          return callback("Error: " + e);
        });
        __iced_deferrals._fulfill();
      }
    });
  };

  if (require.main === module) {
    argv = require('optimist').argv;
    if (argv._.length < 1) {
      toplevel();
    } else {
      parsed = esprima.parse(fs.readFileSync(argv._[0]), {
        loc: true
      });
      interp = createInterpreter();
      interp(parsed, new Environment, (function() {}), function(e) {
        console.log("Error: " + e);
        return process.exit(1);
      });
    }
  }

}).call(this);
